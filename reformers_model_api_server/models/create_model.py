from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reformers_model_api_server.models.base_model import Model
import re
from reformers_model_api_server import util

import re  # noqa: E501

class CreateModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_name=None, parameters=None):  # noqa: E501
        """CreateModel - a model defined in OpenAPI

        :param model_name: The model_name of this CreateModel.  # noqa: E501
        :type model_name: str
        :param parameters: The parameters of this CreateModel.  # noqa: E501
        :type parameters: Dict[str, object]
        """
        self.openapi_types = {
            'model_name': str,
            'parameters': Dict[str, object]
        }

        self.attribute_map = {
            'model_name': 'model_name',
            'parameters': 'parameters'
        }

        self._model_name = model_name
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'CreateModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The create_model of this CreateModel.  # noqa: E501
        :rtype: CreateModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_name(self) -> str:
        """Gets the model_name of this CreateModel.

        A globally unique name for a model generator  # noqa: E501

        :return: The model_name of this CreateModel.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name: str):
        """Sets the model_name of this CreateModel.

        A globally unique name for a model generator  # noqa: E501

        :param model_name: The model_name of this CreateModel.
        :type model_name: str
        """
        if model_name is not None and not re.search(r'^[a-zA-Z0-9][a-zA-Z0-9-]+$', model_name):  # noqa: E501
            raise ValueError("Invalid value for `model_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9][a-zA-Z0-9-]+$/`")  # noqa: E501

        self._model_name = model_name

    @property
    def parameters(self) -> Dict[str, object]:
        """Gets the parameters of this CreateModel.


        :return: The parameters of this CreateModel.
        :rtype: Dict[str, object]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: Dict[str, object]):
        """Sets the parameters of this CreateModel.


        :param parameters: The parameters of this CreateModel.
        :type parameters: Dict[str, object]
        """

        self._parameters = parameters

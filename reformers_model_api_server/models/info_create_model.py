from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reformers_model_api_server.models.base_model import Model
import re
from reformers_model_api_server import util

import re  # noqa: E501

class InfoCreateModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_id=None, status=None, creation_date=None, info=None):  # noqa: E501
        """InfoCreateModel - a model defined in OpenAPI

        :param task_id: The task_id of this InfoCreateModel.  # noqa: E501
        :type task_id: str
        :param status: The status of this InfoCreateModel.  # noqa: E501
        :type status: str
        :param creation_date: The creation_date of this InfoCreateModel.  # noqa: E501
        :type creation_date: datetime
        :param info: The info of this InfoCreateModel.  # noqa: E501
        :type info: str
        """
        self.openapi_types = {
            'task_id': str,
            'status': str,
            'creation_date': datetime,
            'info': str
        }

        self.attribute_map = {
            'task_id': 'task-id',
            'status': 'status',
            'creation_date': 'creation-date',
            'info': 'info'
        }

        self._task_id = task_id
        self._status = status
        self._creation_date = creation_date
        self._info = info

    @classmethod
    def from_dict(cls, dikt) -> 'InfoCreateModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The info_create_model of this InfoCreateModel.  # noqa: E501
        :rtype: InfoCreateModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_id(self) -> str:
        """Gets the task_id of this InfoCreateModel.


        :return: The task_id of this InfoCreateModel.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id: str):
        """Sets the task_id of this InfoCreateModel.


        :param task_id: The task_id of this InfoCreateModel.
        :type task_id: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")  # noqa: E501
        if task_id is not None and not re.search(r'^(?=(.{4})*$)[A-Za-z0-9+\/]*={0,2}$', task_id):  # noqa: E501
            raise ValueError(r"Invalid value for `task_id`, must be a follow pattern or equal to `/^(?=(.{4})*$)[A-Za-z0-9+\/]*={0,2}$/`")  # noqa: E501

        self._task_id = task_id

    @property
    def status(self) -> str:
        """Gets the status of this InfoCreateModel.

        * `pending` - task has not yet finished * `finished` - task has finished successfully and the new model container image is available in the registry * `superseded` - a newer task has generated a model container image that is available in the registry * `failed` - task has failed and has not generated a new model container image in the registry  # noqa: E501

        :return: The status of this InfoCreateModel.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this InfoCreateModel.

        * `pending` - task has not yet finished * `finished` - task has finished successfully and the new model container image is available in the registry * `superseded` - a newer task has generated a model container image that is available in the registry * `failed` - task has failed and has not generated a new model container image in the registry  # noqa: E501

        :param status: The status of this InfoCreateModel.
        :type status: str
        """
        allowed_values = ["pending", "finished", "superseded", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def creation_date(self) -> datetime:
        """Gets the creation_date of this InfoCreateModel.


        :return: The creation_date of this InfoCreateModel.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date: datetime):
        """Sets the creation_date of this InfoCreateModel.


        :param creation_date: The creation_date of this InfoCreateModel.
        :type creation_date: datetime
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def info(self) -> str:
        """Gets the info of this InfoCreateModel.


        :return: The info of this InfoCreateModel.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info: str):
        """Sets the info of this InfoCreateModel.


        :param info: The info of this InfoCreateModel.
        :type info: str
        """

        self._info = info

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reformers_model_api_server.models.base_model import Model
import re
from reformers_model_api_server import util

import re  # noqa: E501

class InfoGenerateModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, generator_name=None, generator_tag=None, mandatory_parameters=None, optional_parameters=None):  # noqa: E501
        """InfoGenerateModel - a model defined in OpenAPI

        :param generator_name: The generator_name of this InfoGenerateModel.  # noqa: E501
        :type generator_name: str
        :param generator_tag: The generator_tag of this InfoGenerateModel.  # noqa: E501
        :type generator_tag: str
        :param mandatory_parameters: The mandatory_parameters of this InfoGenerateModel.  # noqa: E501
        :type mandatory_parameters: Dict[str, object]
        :param optional_parameters: The optional_parameters of this InfoGenerateModel.  # noqa: E501
        :type optional_parameters: Dict[str, object]
        """
        self.openapi_types = {
            'generator_name': str,
            'generator_tag': str,
            'mandatory_parameters': Dict[str, object],
            'optional_parameters': Dict[str, object]
        }

        self.attribute_map = {
            'generator_name': 'generator_name',
            'generator_tag': 'generator_tag',
            'mandatory_parameters': 'mandatory_parameters',
            'optional_parameters': 'optional_parameters'
        }

        self._generator_name = generator_name
        self._generator_tag = generator_tag
        self._mandatory_parameters = mandatory_parameters
        self._optional_parameters = optional_parameters

    @classmethod
    def from_dict(cls, dikt) -> 'InfoGenerateModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The info_generate_model of this InfoGenerateModel.  # noqa: E501
        :rtype: InfoGenerateModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def generator_name(self) -> str:
        """Gets the generator_name of this InfoGenerateModel.

        unique name for a model generator  # noqa: E501

        :return: The generator_name of this InfoGenerateModel.
        :rtype: str
        """
        return self._generator_name

    @generator_name.setter
    def generator_name(self, generator_name: str):
        """Sets the generator_name of this InfoGenerateModel.

        unique name for a model generator  # noqa: E501

        :param generator_name: The generator_name of this InfoGenerateModel.
        :type generator_name: str
        """
        if generator_name is not None and not re.search(r'^[a-zA-Z0-9][a-zA-Z0-9-]+$', generator_name):  # noqa: E501
            raise ValueError("Invalid value for `generator_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9][a-zA-Z0-9-]+$/`")  # noqa: E501

        self._generator_name = generator_name

    @property
    def generator_tag(self) -> str:
        """Gets the generator_tag of this InfoGenerateModel.

        tag for a specific version of a model generator  # noqa: E501

        :return: The generator_tag of this InfoGenerateModel.
        :rtype: str
        """
        return self._generator_tag

    @generator_tag.setter
    def generator_tag(self, generator_tag: str):
        """Sets the generator_tag of this InfoGenerateModel.

        tag for a specific version of a model generator  # noqa: E501

        :param generator_tag: The generator_tag of this InfoGenerateModel.
        :type generator_tag: str
        """
        if generator_tag is not None and not re.search(r'^[a-zA-Z0-9][a-zA-Z0-9-]+$', generator_tag):  # noqa: E501
            raise ValueError("Invalid value for `generator_tag`, must be a follow pattern or equal to `/^[a-zA-Z0-9][a-zA-Z0-9-]+$/`")  # noqa: E501

        self._generator_tag = generator_tag

    @property
    def mandatory_parameters(self) -> Dict[str, object]:
        """Gets the mandatory_parameters of this InfoGenerateModel.


        :return: The mandatory_parameters of this InfoGenerateModel.
        :rtype: Dict[str, object]
        """
        return self._mandatory_parameters

    @mandatory_parameters.setter
    def mandatory_parameters(self, mandatory_parameters: Dict[str, object]):
        """Sets the mandatory_parameters of this InfoGenerateModel.


        :param mandatory_parameters: The mandatory_parameters of this InfoGenerateModel.
        :type mandatory_parameters: Dict[str, object]
        """

        self._mandatory_parameters = mandatory_parameters

    @property
    def optional_parameters(self) -> Dict[str, object]:
        """Gets the optional_parameters of this InfoGenerateModel.


        :return: The optional_parameters of this InfoGenerateModel.
        :rtype: Dict[str, object]
        """
        return self._optional_parameters

    @optional_parameters.setter
    def optional_parameters(self, optional_parameters: Dict[str, object]):
        """Sets the optional_parameters of this InfoGenerateModel.


        :param optional_parameters: The optional_parameters of this InfoGenerateModel.
        :type optional_parameters: Dict[str, object]
        """

        self._optional_parameters = optional_parameters

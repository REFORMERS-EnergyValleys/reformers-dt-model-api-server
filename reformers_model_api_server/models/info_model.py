from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reformers_model_api_server.models.base_model import Model
from reformers_model_api_server.models.model_format import ModelFormat
from reformers_model_api_server.models.model_parameters_value import ModelParametersValue
import re
from reformers_model_api_server import util

from reformers_model_api_server.models.model_format import ModelFormat  # noqa: E501
from reformers_model_api_server.models.model_parameters_value import ModelParametersValue  # noqa: E501
import re  # noqa: E501

class InfoModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameters=None, optional_parameters=None, info=None, generation_parameters=None, format=None, image_name=None, image_tag=None, artifact_group_id=None, artifact_id=None, artifact_version=None, artifact_type=None):  # noqa: E501
        """InfoModel - a model defined in OpenAPI

        :param parameters: The parameters of this InfoModel.  # noqa: E501
        :type parameters: Dict[str, ModelParametersValue]
        :param optional_parameters: The optional_parameters of this InfoModel.  # noqa: E501
        :type optional_parameters: Dict[str, ModelParametersValue]
        :param info: The info of this InfoModel.  # noqa: E501
        :type info: str
        :param generation_parameters: The generation_parameters of this InfoModel.  # noqa: E501
        :type generation_parameters: Dict[str, ModelParametersValue]
        :param format: The format of this InfoModel.  # noqa: E501
        :type format: ModelFormat
        :param image_name: The image_name of this InfoModel.  # noqa: E501
        :type image_name: str
        :param image_tag: The image_tag of this InfoModel.  # noqa: E501
        :type image_tag: str
        :param artifact_group_id: The artifact_group_id of this InfoModel.  # noqa: E501
        :type artifact_group_id: str
        :param artifact_id: The artifact_id of this InfoModel.  # noqa: E501
        :type artifact_id: str
        :param artifact_version: The artifact_version of this InfoModel.  # noqa: E501
        :type artifact_version: str
        :param artifact_type: The artifact_type of this InfoModel.  # noqa: E501
        :type artifact_type: str
        """
        self.openapi_types = {
            'parameters': Dict[str, ModelParametersValue],
            'optional_parameters': Dict[str, ModelParametersValue],
            'info': str,
            'generation_parameters': Dict[str, ModelParametersValue],
            'format': ModelFormat,
            'image_name': str,
            'image_tag': str,
            'artifact_group_id': str,
            'artifact_id': str,
            'artifact_version': str,
            'artifact_type': str
        }

        self.attribute_map = {
            'parameters': 'parameters',
            'optional_parameters': 'optional_parameters',
            'info': 'info',
            'generation_parameters': 'generation_parameters',
            'format': 'format',
            'image_name': 'image-name',
            'image_tag': 'image-tag',
            'artifact_group_id': 'artifact-group-id',
            'artifact_id': 'artifact-id',
            'artifact_version': 'artifact-version',
            'artifact_type': 'artifact-type'
        }

        self._parameters = parameters
        self._optional_parameters = optional_parameters
        self._info = info
        self._generation_parameters = generation_parameters
        self._format = format
        self._image_name = image_name
        self._image_tag = image_tag
        self._artifact_group_id = artifact_group_id
        self._artifact_id = artifact_id
        self._artifact_version = artifact_version
        self._artifact_type = artifact_type

    @classmethod
    def from_dict(cls, dikt) -> 'InfoModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The info_model of this InfoModel.  # noqa: E501
        :rtype: InfoModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameters(self) -> Dict[str, ModelParametersValue]:
        """Gets the parameters of this InfoModel.


        :return: The parameters of this InfoModel.
        :rtype: Dict[str, ModelParametersValue]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: Dict[str, ModelParametersValue]):
        """Sets the parameters of this InfoModel.


        :param parameters: The parameters of this InfoModel.
        :type parameters: Dict[str, ModelParametersValue]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    @property
    def optional_parameters(self) -> Dict[str, ModelParametersValue]:
        """Gets the optional_parameters of this InfoModel.


        :return: The optional_parameters of this InfoModel.
        :rtype: Dict[str, ModelParametersValue]
        """
        return self._optional_parameters

    @optional_parameters.setter
    def optional_parameters(self, optional_parameters: Dict[str, ModelParametersValue]):
        """Sets the optional_parameters of this InfoModel.


        :param optional_parameters: The optional_parameters of this InfoModel.
        :type optional_parameters: Dict[str, ModelParametersValue]
        """
        if optional_parameters is None:
            raise ValueError("Invalid value for `optional_parameters`, must not be `None`")  # noqa: E501

        self._optional_parameters = optional_parameters

    @property
    def info(self) -> str:
        """Gets the info of this InfoModel.

        may contain detailled information about the model  # noqa: E501

        :return: The info of this InfoModel.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info: str):
        """Sets the info of this InfoModel.

        may contain detailled information about the model  # noqa: E501

        :param info: The info of this InfoModel.
        :type info: str
        """
        if info is not None and not re.search(r'^[a-z0-9][a-z0-9-]+$', info):  # noqa: E501
            raise ValueError(r"Invalid value for `info`, must be a follow pattern or equal to `/^[a-z0-9][a-z0-9-]+$/`")  # noqa: E501

        self._info = info

    @property
    def generation_parameters(self) -> Dict[str, ModelParametersValue]:
        """Gets the generation_parameters of this InfoModel.


        :return: The generation_parameters of this InfoModel.
        :rtype: Dict[str, ModelParametersValue]
        """
        return self._generation_parameters

    @generation_parameters.setter
    def generation_parameters(self, generation_parameters: Dict[str, ModelParametersValue]):
        """Sets the generation_parameters of this InfoModel.


        :param generation_parameters: The generation_parameters of this InfoModel.
        :type generation_parameters: Dict[str, ModelParametersValue]
        """
        if generation_parameters is None:
            raise ValueError("Invalid value for `generation_parameters`, must not be `None`")  # noqa: E501

        self._generation_parameters = generation_parameters

    @property
    def format(self) -> ModelFormat:
        """Gets the format of this InfoModel.


        :return: The format of this InfoModel.
        :rtype: ModelFormat
        """
        return self._format

    @format.setter
    def format(self, format: ModelFormat):
        """Sets the format of this InfoModel.


        :param format: The format of this InfoModel.
        :type format: ModelFormat
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501

        self._format = format

    @property
    def image_name(self) -> str:
        """Gets the image_name of this InfoModel.


        :return: The image_name of this InfoModel.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name: str):
        """Sets the image_name of this InfoModel.


        :param image_name: The image_name of this InfoModel.
        :type image_name: str
        """
        if image_name is not None and not re.search(r'^[a-zA-Z0-9][a-zA-Z0-9-_\/]+$', image_name):  # noqa: E501
            raise ValueError(r"Invalid value for `image_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9][a-zA-Z0-9-_\/]+$/`")  # noqa: E501

        self._image_name = image_name

    @property
    def image_tag(self) -> str:
        """Gets the image_tag of this InfoModel.


        :return: The image_tag of this InfoModel.
        :rtype: str
        """
        return self._image_tag

    @image_tag.setter
    def image_tag(self, image_tag: str):
        """Sets the image_tag of this InfoModel.


        :param image_tag: The image_tag of this InfoModel.
        :type image_tag: str
        """
        if image_tag is not None and not re.search(r'^[a-zA-Z0-9][a-zA-Z0-9-_]+$', image_tag):  # noqa: E501
            raise ValueError(r"Invalid value for `image_tag`, must be a follow pattern or equal to `/^[a-zA-Z0-9][a-zA-Z0-9-_]+$/`")  # noqa: E501

        self._image_tag = image_tag

    @property
    def artifact_group_id(self) -> str:
        """Gets the artifact_group_id of this InfoModel.


        :return: The artifact_group_id of this InfoModel.
        :rtype: str
        """
        return self._artifact_group_id

    @artifact_group_id.setter
    def artifact_group_id(self, artifact_group_id: str):
        """Sets the artifact_group_id of this InfoModel.


        :param artifact_group_id: The artifact_group_id of this InfoModel.
        :type artifact_group_id: str
        """
        if artifact_group_id is not None and not re.search(r'^[a-zA-Z0-9][a-zA-Z0-9-_.]+[a-zA-Z0-9-_]+$', artifact_group_id):  # noqa: E501
            raise ValueError(r"Invalid value for `artifact_group_id`, must be a follow pattern or equal to `/^[a-zA-Z0-9][a-zA-Z0-9-_.]+[a-zA-Z0-9-_]+$/`")  # noqa: E501

        self._artifact_group_id = artifact_group_id

    @property
    def artifact_id(self) -> str:
        """Gets the artifact_id of this InfoModel.


        :return: The artifact_id of this InfoModel.
        :rtype: str
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id: str):
        """Sets the artifact_id of this InfoModel.


        :param artifact_id: The artifact_id of this InfoModel.
        :type artifact_id: str
        """
        if artifact_id is not None and not re.search(r'^[a-zA-Z0-9-_]+$', artifact_id):  # noqa: E501
            raise ValueError(r"Invalid value for `artifact_id`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_]+$/`")  # noqa: E501

        self._artifact_id = artifact_id

    @property
    def artifact_version(self) -> str:
        """Gets the artifact_version of this InfoModel.


        :return: The artifact_version of this InfoModel.
        :rtype: str
        """
        return self._artifact_version

    @artifact_version.setter
    def artifact_version(self, artifact_version: str):
        """Sets the artifact_version of this InfoModel.


        :param artifact_version: The artifact_version of this InfoModel.
        :type artifact_version: str
        """
        if artifact_version is not None and not re.search(r'^[a-zA-Z0-9-_.]+$', artifact_version):  # noqa: E501
            raise ValueError(r"Invalid value for `artifact_version`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_.]+$/`")  # noqa: E501

        self._artifact_version = artifact_version

    @property
    def artifact_type(self) -> str:
        """Gets the artifact_type of this InfoModel.


        :return: The artifact_type of this InfoModel.
        :rtype: str
        """
        return self._artifact_type

    @artifact_type.setter
    def artifact_type(self, artifact_type: str):
        """Sets the artifact_type of this InfoModel.


        :param artifact_type: The artifact_type of this InfoModel.
        :type artifact_type: str
        """
        if artifact_type is not None and not re.search(r'^[a-zA-Z0-9]+$', artifact_type):  # noqa: E501
            raise ValueError(r"Invalid value for `artifact_type`, must be a follow pattern or equal to `/^[a-zA-Z0-9]+$/`")  # noqa: E501

        self._artifact_type = artifact_type

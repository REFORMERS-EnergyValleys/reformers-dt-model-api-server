from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reformers_model_api_server.models.base_model import Model
from reformers_model_api_server.models.model_generator_configuration_value import ModelGeneratorConfigurationValue
from reformers_model_api_server.models.model_generator_parameters_value import ModelGeneratorParametersValue
import re
from reformers_model_api_server import util

from reformers_model_api_server.models.model_generator_configuration_value import ModelGeneratorConfigurationValue  # noqa: E501
from reformers_model_api_server.models.model_generator_parameters_value import ModelGeneratorParametersValue  # noqa: E501
import re  # noqa: E501

class InfoModelGenerator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, generator_name=None, generator_tag=None, parameters=None, config=None, build=None):  # noqa: E501
        """InfoModelGenerator - a model defined in OpenAPI

        :param generator_name: The generator_name of this InfoModelGenerator.  # noqa: E501
        :type generator_name: str
        :param generator_tag: The generator_tag of this InfoModelGenerator.  # noqa: E501
        :type generator_tag: str
        :param parameters: The parameters of this InfoModelGenerator.  # noqa: E501
        :type parameters: Dict[str, ModelGeneratorParametersValue]
        :param config: The config of this InfoModelGenerator.  # noqa: E501
        :type config: Dict[str, ModelGeneratorConfigurationValue]
        :param build: The build of this InfoModelGenerator.  # noqa: E501
        :type build: object
        """
        self.openapi_types = {
            'generator_name': str,
            'generator_tag': str,
            'parameters': Dict[str, ModelGeneratorParametersValue],
            'config': Dict[str, ModelGeneratorConfigurationValue],
            'build': object
        }

        self.attribute_map = {
            'generator_name': 'generator_name',
            'generator_tag': 'generator_tag',
            'parameters': 'parameters',
            'config': 'config',
            'build': 'build'
        }

        self._generator_name = generator_name
        self._generator_tag = generator_tag
        self._parameters = parameters
        self._config = config
        self._build = build

    @classmethod
    def from_dict(cls, dikt) -> 'InfoModelGenerator':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The info_model_generator of this InfoModelGenerator.  # noqa: E501
        :rtype: InfoModelGenerator
        """
        return util.deserialize_model(dikt, cls)

    @property
    def generator_name(self) -> str:
        """Gets the generator_name of this InfoModelGenerator.

        unique name for a model generator  # noqa: E501

        :return: The generator_name of this InfoModelGenerator.
        :rtype: str
        """
        return self._generator_name

    @generator_name.setter
    def generator_name(self, generator_name: str):
        """Sets the generator_name of this InfoModelGenerator.

        unique name for a model generator  # noqa: E501

        :param generator_name: The generator_name of this InfoModelGenerator.
        :type generator_name: str
        """
        if generator_name is None:
            raise ValueError("Invalid value for `generator_name`, must not be `None`")  # noqa: E501
        if generator_name is not None and not re.search(r'^[a-zA-Z0-9][a-zA-Z0-9-]+$', generator_name):  # noqa: E501
            raise ValueError(r"Invalid value for `generator_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9][a-zA-Z0-9-]+$/`")  # noqa: E501

        self._generator_name = generator_name

    @property
    def generator_tag(self) -> str:
        """Gets the generator_tag of this InfoModelGenerator.

        tag for a specific version of a model generator  # noqa: E501

        :return: The generator_tag of this InfoModelGenerator.
        :rtype: str
        """
        return self._generator_tag

    @generator_tag.setter
    def generator_tag(self, generator_tag: str):
        """Sets the generator_tag of this InfoModelGenerator.

        tag for a specific version of a model generator  # noqa: E501

        :param generator_tag: The generator_tag of this InfoModelGenerator.
        :type generator_tag: str
        """
        if generator_tag is None:
            raise ValueError("Invalid value for `generator_tag`, must not be `None`")  # noqa: E501
        if generator_tag is not None and not re.search(r'^[a-zA-Z0-9][a-zA-Z0-9-]+$', generator_tag):  # noqa: E501
            raise ValueError(r"Invalid value for `generator_tag`, must be a follow pattern or equal to `/^[a-zA-Z0-9][a-zA-Z0-9-]+$/`")  # noqa: E501

        self._generator_tag = generator_tag

    @property
    def parameters(self) -> Dict[str, ModelGeneratorParametersValue]:
        """Gets the parameters of this InfoModelGenerator.


        :return: The parameters of this InfoModelGenerator.
        :rtype: Dict[str, ModelGeneratorParametersValue]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: Dict[str, ModelGeneratorParametersValue]):
        """Sets the parameters of this InfoModelGenerator.


        :param parameters: The parameters of this InfoModelGenerator.
        :type parameters: Dict[str, ModelGeneratorParametersValue]
        """

        self._parameters = parameters

    @property
    def config(self) -> Dict[str, ModelGeneratorConfigurationValue]:
        """Gets the config of this InfoModelGenerator.


        :return: The config of this InfoModelGenerator.
        :rtype: Dict[str, ModelGeneratorConfigurationValue]
        """
        return self._config

    @config.setter
    def config(self, config: Dict[str, ModelGeneratorConfigurationValue]):
        """Sets the config of this InfoModelGenerator.


        :param config: The config of this InfoModelGenerator.
        :type config: Dict[str, ModelGeneratorConfigurationValue]
        """

        self._config = config

    @property
    def build(self) -> object:
        """Gets the build of this InfoModelGenerator.


        :return: The build of this InfoModelGenerator.
        :rtype: object
        """
        return self._build

    @build.setter
    def build(self, build: object):
        """Sets the build of this InfoModelGenerator.


        :param build: The build of this InfoModelGenerator.
        :type build: object
        """

        self._build = build

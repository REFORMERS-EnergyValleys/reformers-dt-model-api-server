from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reformers_model_api_server.models.base_model import Model
from reformers_model_api_server.models.info_model import InfoModel
import re
from reformers_model_api_server import util

from reformers_model_api_server.models.info_model import InfoModel  # noqa: E501
import re  # noqa: E501

class ListModels(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, generator_name=None, generator_tag=None, models=None):  # noqa: E501
        """ListModels - a model defined in OpenAPI

        :param generator_name: The generator_name of this ListModels.  # noqa: E501
        :type generator_name: str
        :param generator_tag: The generator_tag of this ListModels.  # noqa: E501
        :type generator_tag: str
        :param models: The models of this ListModels.  # noqa: E501
        :type models: Dict[str, Dict[str, InfoModel]]
        """
        self.openapi_types = {
            'generator_name': str,
            'generator_tag': str,
            'models': Dict[str, Dict[str, InfoModel]]
        }

        self.attribute_map = {
            'generator_name': 'generator_name',
            'generator_tag': 'generator_tag',
            'models': 'models'
        }

        self._generator_name = generator_name
        self._generator_tag = generator_tag
        self._models = models

    @classmethod
    def from_dict(cls, dikt) -> 'ListModels':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The list_models of this ListModels.  # noqa: E501
        :rtype: ListModels
        """
        return util.deserialize_model(dikt, cls)

    @property
    def generator_name(self) -> str:
        """Gets the generator_name of this ListModels.

        unique name for a model generator  # noqa: E501

        :return: The generator_name of this ListModels.
        :rtype: str
        """
        return self._generator_name

    @generator_name.setter
    def generator_name(self, generator_name: str):
        """Sets the generator_name of this ListModels.

        unique name for a model generator  # noqa: E501

        :param generator_name: The generator_name of this ListModels.
        :type generator_name: str
        """
        if generator_name is not None and not re.search(r'^[a-zA-Z0-9][a-zA-Z0-9-]+$', generator_name):  # noqa: E501
            raise ValueError(r"Invalid value for `generator_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9][a-zA-Z0-9-]+$/`")  # noqa: E501

        self._generator_name = generator_name

    @property
    def generator_tag(self) -> str:
        """Gets the generator_tag of this ListModels.

        tag for a specific version of a model generator  # noqa: E501

        :return: The generator_tag of this ListModels.
        :rtype: str
        """
        return self._generator_tag

    @generator_tag.setter
    def generator_tag(self, generator_tag: str):
        """Sets the generator_tag of this ListModels.

        tag for a specific version of a model generator  # noqa: E501

        :param generator_tag: The generator_tag of this ListModels.
        :type generator_tag: str
        """
        if generator_tag is not None and not re.search(r'^[a-zA-Z0-9][a-zA-Z0-9-]+$', generator_tag):  # noqa: E501
            raise ValueError(r"Invalid value for `generator_tag`, must be a follow pattern or equal to `/^[a-zA-Z0-9][a-zA-Z0-9-]+$/`")  # noqa: E501

        self._generator_tag = generator_tag

    @property
    def models(self) -> Dict[str, Dict[str, InfoModel]]:
        """Gets the models of this ListModels.


        :return: The models of this ListModels.
        :rtype: Dict[str, Dict[str, InfoModel]]
        """
        return self._models

    @models.setter
    def models(self, models: Dict[str, Dict[str, InfoModel]]):
        """Sets the models of this ListModels.


        :param models: The models of this ListModels.
        :type models: Dict[str, Dict[str, InfoModel]]
        """

        self._models = models

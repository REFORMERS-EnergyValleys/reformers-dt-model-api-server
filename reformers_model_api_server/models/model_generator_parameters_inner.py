from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reformers_model_api_server.models.base_model import Model
from reformers_model_api_server import util


class ModelGeneratorParametersInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, info=None, default=None):  # noqa: E501
        """ModelGeneratorParametersInner - a model defined in OpenAPI

        :param info: The info of this ModelGeneratorParametersInner.  # noqa: E501
        :type info: str
        :param default: The default of this ModelGeneratorParametersInner.  # noqa: E501
        :type default: str
        """
        self.openapi_types = {
            'info': str,
            'default': str
        }

        self.attribute_map = {
            'info': 'info',
            'default': 'default'
        }

        self._info = info
        self._default = default

    @classmethod
    def from_dict(cls, dikt) -> 'ModelGeneratorParametersInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The model_generator_parameters_inner of this ModelGeneratorParametersInner.  # noqa: E501
        :rtype: ModelGeneratorParametersInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def info(self) -> str:
        """Gets the info of this ModelGeneratorParametersInner.

        detailed information about the parameter  # noqa: E501

        :return: The info of this ModelGeneratorParametersInner.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info: str):
        """Sets the info of this ModelGeneratorParametersInner.

        detailed information about the parameter  # noqa: E501

        :param info: The info of this ModelGeneratorParametersInner.
        :type info: str
        """
        if info is None:
            raise ValueError("Invalid value for `info`, must not be `None`")  # noqa: E501

        self._info = info

    @property
    def default(self) -> str:
        """Gets the default of this ModelGeneratorParametersInner.

        default value of the parameter  # noqa: E501

        :return: The default of this ModelGeneratorParametersInner.
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default: str):
        """Sets the default of this ModelGeneratorParametersInner.

        default value of the parameter  # noqa: E501

        :param default: The default of this ModelGeneratorParametersInner.
        :type default: str
        """
        if default is None:
            raise ValueError("Invalid value for `default`, must not be `None`")  # noqa: E501

        self._default = default

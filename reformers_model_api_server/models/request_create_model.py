from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reformers_model_api_server.models.base_model import Model
from reformers_model_api_server.models.model_generator_configuration_value import ModelGeneratorConfigurationValue
import re
from reformers_model_api_server import util

from reformers_model_api_server.models.model_generator_configuration_value import ModelGeneratorConfigurationValue  # noqa: E501
import re  # noqa: E501

class RequestCreateModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_name=None, model_tag=None, parameters=None):  # noqa: E501
        """RequestCreateModel - a model defined in OpenAPI

        :param model_name: The model_name of this RequestCreateModel.  # noqa: E501
        :type model_name: str
        :param model_tag: The model_tag of this RequestCreateModel.  # noqa: E501
        :type model_tag: str
        :param parameters: The parameters of this RequestCreateModel.  # noqa: E501
        :type parameters: Dict[str, ModelGeneratorConfigurationValue]
        """
        self.openapi_types = {
            'model_name': str,
            'model_tag': str,
            'parameters': Dict[str, ModelGeneratorConfigurationValue]
        }

        self.attribute_map = {
            'model_name': 'model_name',
            'model_tag': 'model_tag',
            'parameters': 'parameters'
        }

        self._model_name = model_name
        self._model_tag = model_tag
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'RequestCreateModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The request_create_model of this RequestCreateModel.  # noqa: E501
        :rtype: RequestCreateModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_name(self) -> str:
        """Gets the model_name of this RequestCreateModel.

        unique name for a model  # noqa: E501

        :return: The model_name of this RequestCreateModel.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name: str):
        """Sets the model_name of this RequestCreateModel.

        unique name for a model  # noqa: E501

        :param model_name: The model_name of this RequestCreateModel.
        :type model_name: str
        """
        if model_name is None:
            raise ValueError("Invalid value for `model_name`, must not be `None`")  # noqa: E501
        if model_name is not None and not re.search(r'^[a-z0-9][a-z0-9-]+$', model_name):  # noqa: E501
            raise ValueError(r"Invalid value for `model_name`, must be a follow pattern or equal to `/^[a-z0-9][a-z0-9-]+$/`")  # noqa: E501

        self._model_name = model_name

    @property
    def model_tag(self) -> str:
        """Gets the model_tag of this RequestCreateModel.

        tag for a specific version of a model  # noqa: E501

        :return: The model_tag of this RequestCreateModel.
        :rtype: str
        """
        return self._model_tag

    @model_tag.setter
    def model_tag(self, model_tag: str):
        """Sets the model_tag of this RequestCreateModel.

        tag for a specific version of a model  # noqa: E501

        :param model_tag: The model_tag of this RequestCreateModel.
        :type model_tag: str
        """
        if model_tag is None:
            raise ValueError("Invalid value for `model_tag`, must not be `None`")  # noqa: E501
        if model_tag is not None and not re.search(r'^[a-z0-9][a-z0-9-]+$', model_tag):  # noqa: E501
            raise ValueError(r"Invalid value for `model_tag`, must be a follow pattern or equal to `/^[a-z0-9][a-z0-9-]+$/`")  # noqa: E501

        self._model_tag = model_tag

    @property
    def parameters(self) -> Dict[str, ModelGeneratorConfigurationValue]:
        """Gets the parameters of this RequestCreateModel.


        :return: The parameters of this RequestCreateModel.
        :rtype: Dict[str, ModelGeneratorConfigurationValue]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: Dict[str, ModelGeneratorConfigurationValue]):
        """Sets the parameters of this RequestCreateModel.


        :param parameters: The parameters of this RequestCreateModel.
        :type parameters: Dict[str, ModelGeneratorConfigurationValue]
        """

        self._parameters = parameters
